Source: https://github.com/Goob-Station/Goob-Station
License: AGPL-3.0-or-later
===================================================================
diff --git a/Content.Client/Robotics/UI/RoboticsConsoleWindow.xaml.cs b/Content.Client/Robotics/UI/RoboticsConsoleWindow.xaml.cs
index 06e5674d9c..7a6d5c434c 100644
--- a/Content.Client/Robotics/UI/RoboticsConsoleWindow.xaml.cs
+++ b/Content.Client/Robotics/UI/RoboticsConsoleWindow.xaml.cs
@@ -77,6 +77,14 @@ public void UpdateState(RoboticsConsoleState state)
         if (_selected is {} selected && !_cyborgs.ContainsKey(selected))
             _selected = null;
 
+        var isAiControllable = false;
+
+        if (_selected != null)
+        {
+            _cyborgs.TryGetValue(_selected, out var data);
+            isAiControllable = data.IsAiControllable;
+        }
+
         var hasCyborgs = _cyborgs.Count > 0;
         NoCyborgs.Visible = !hasCyborgs;
         CyborgsContainer.Visible = hasCyborgs;
diff --git a/Content.Client/Silicons/Borgs/AiRemoteControlSystem.cs b/Content.Client/Silicons/Borgs/AiRemoteControlSystem.cs
new file mode 100644
index 0000000000..bdbadccfe9
--- /dev/null
+++ b/Content.Client/Silicons/Borgs/AiRemoteControlSystem.cs
@@ -0,0 +1,7 @@
+using Content.Shared.Silicons.Borgs;
+
+namespace Content.Client.Silicons.Borgs;
+
+public sealed partial class AiRemoteControlSystem : SharedAiRemoteControlSystem
+{
+}
\ No newline at end of file
diff --git a/Content.Client/Silicons/Laws/Ui/RemoteDeviceDisplay.xaml b/Content.Client/Silicons/Laws/Ui/RemoteDeviceDisplay.xaml
new file mode 100644
index 0000000000..4de5d244e6
--- /dev/null
+++ b/Content.Client/Silicons/Laws/Ui/RemoteDeviceDisplay.xaml
@@ -0,0 +1,18 @@
+<Control xmlns="https://spacestation14.io"
+         xmlns:customControls="clr-namespace:Content.Client.Administration.UI.CustomControls"
+         Margin="0 0 0 10">
+    <PanelContainer VerticalExpand="True" StyleClasses="BackgroundDark">
+        <BoxContainer Orientation="Vertical"
+                      HorizontalExpand="True"
+                      VerticalExpand="True"
+                      Margin="5 5 5 5">
+            <customControls:HSeparator Margin="0 5 0 5"/>
+            <RichTextLabel Name="DeviceName"/>
+            <BoxContainer Name="RemoteControlButtons" Orientation="Horizontal" HorizontalExpand="True" Margin="0 5 0 0">
+                <Button Name="MoveButton" StyleClasses="chatSelectorOptionButton" Text="{Loc ai-remote-ui-menu-moveto}"/>
+                <Control Margin="2 0 0 0"/>
+                <Button Name="TakeControlButton" StyleClasses="chatSelectorOptionButton" Text="{Loc ai-remote-control}"/>
+            </BoxContainer>
+        </BoxContainer>
+    </PanelContainer>
+</Control>
diff --git a/Content.Client/Silicons/Laws/Ui/RemoteDeviceDisplay.xaml.cs b/Content.Client/Silicons/Laws/Ui/RemoteDeviceDisplay.xaml.cs
new file mode 100644
index 0000000000..93c3f259e2
--- /dev/null
+++ b/Content.Client/Silicons/Laws/Ui/RemoteDeviceDisplay.xaml.cs
@@ -0,0 +1,33 @@
+using Robust.Client.UserInterface;
+using Robust.Client.AutoGenerated;
+using Robust.Client.UserInterface.XAML;
+using Content.Shared.Silicons.Borgs.Components;
+
+namespace Content.Client.Silicons.Laws.Ui;
+
+[GenerateTypedNameReferences]
+public sealed partial class RemoteDeviceDisplay : Control
+{
+    public event Action<RemoteDeviceActionEvent>? OnRemoteDeviceAction;
+
+    public RemoteDeviceDisplay(NetEntity netEntityUid, string displayName)
+    {
+        RobustXamlLoader.Load(this);
+
+        DeviceName.SetMessage(displayName);
+
+        MoveButton.OnPressed += _ =>
+        {
+            OnRemoteDeviceAction?.Invoke(new RemoteDeviceActionEvent(
+                RemoteDeviceActionEvent.RemoteDeviceActionType.MoveToDevice,
+                netEntityUid));
+        };
+
+        TakeControlButton.OnPressed += _ =>
+        {
+            OnRemoteDeviceAction?.Invoke(new RemoteDeviceActionEvent(
+                RemoteDeviceActionEvent.RemoteDeviceActionType.TakeControl,
+                netEntityUid));
+        };
+    }
+}
diff --git a/Content.Client/Silicons/Laws/Ui/RemoteDevicesBoundUserInterface.cs b/Content.Client/Silicons/Laws/Ui/RemoteDevicesBoundUserInterface.cs
new file mode 100644
index 0000000000..0e69fa49b1
--- /dev/null
+++ b/Content.Client/Silicons/Laws/Ui/RemoteDevicesBoundUserInterface.cs
@@ -0,0 +1,39 @@
+using Content.Shared.Silicons.Borgs.Components;
+using Robust.Client.UserInterface;
+using static Content.Shared.Silicons.Borgs.Components.AiRemoteControllerComponent;
+
+namespace Content.Client.Silicons.Laws.Ui;
+
+public sealed class RemoteDevicesBoundUserInterface : BoundUserInterface
+{
+    private RemoteDevicesMenu? _menu;
+    private EntityUid _owner;
+
+    public RemoteDevicesBoundUserInterface(EntityUid owner, Enum uiKey) : base(owner, uiKey)
+    {
+        _owner = owner;
+    }
+
+    protected override void Open()
+    {
+        base.Open();
+
+        _menu = this.CreateWindow<RemoteDevicesMenu>();
+        _menu.OnRemoteDeviceAction += SendAction;
+    }
+
+    protected override void UpdateState(BoundUserInterfaceState state)
+    {
+        base.UpdateState(state);
+
+        if (state is not RemoteDevicesBuiState msg)
+            return;
+
+        _menu?.Update(_owner, msg);
+    }
+
+    public void SendAction(RemoteDeviceActionEvent action)
+    {
+        SendMessage(new RemoteDeviceActionMessage(action));
+    }
+}
diff --git a/Content.Client/Silicons/Laws/Ui/RemoteDevicesMenu.xaml b/Content.Client/Silicons/Laws/Ui/RemoteDevicesMenu.xaml
new file mode 100644
index 0000000000..334422cbad
--- /dev/null
+++ b/Content.Client/Silicons/Laws/Ui/RemoteDevicesMenu.xaml
@@ -0,0 +1,27 @@
+<controls:FancyWindow xmlns="https://spacestation14.io"
+                     xmlns:controls="clr-namespace:Content.Client.UserInterface.Controls"
+                     xmlns:gfx="clr-namespace:Robust.Client.Graphics;assembly=Robust.Client"
+                     Title="{Loc ai-remote-ui-menu-title}"
+                     MinSize="355 100"
+                     SetSize="355 415">
+    <BoxContainer Orientation="Vertical"
+                  HorizontalExpand="True"
+                  VerticalExpand="True">
+        <PanelContainer VerticalExpand="True" Margin="10 10 10 10">
+            <PanelContainer.PanelOverride>
+                <gfx:StyleBoxFlat BackgroundColor="#1B1B1E"/>
+            </PanelContainer.PanelOverride>
+            <ScrollContainer
+                HScrollEnabled="False"
+                HorizontalExpand="True"
+                VerticalExpand="True">
+                <BoxContainer
+                    Name="RemoteDevicesDisplayContainer"
+                    Orientation="Vertical"
+                    VerticalExpand="True"
+                    Margin="10 10 10 0">
+                </BoxContainer>
+            </ScrollContainer>
+        </PanelContainer>
+    </BoxContainer>
+</controls:FancyWindow>
diff --git a/Content.Client/Silicons/Laws/Ui/RemoteDevicesMenu.xaml.cs b/Content.Client/Silicons/Laws/Ui/RemoteDevicesMenu.xaml.cs
new file mode 100644
index 0000000000..bf1ffc661f
--- /dev/null
+++ b/Content.Client/Silicons/Laws/Ui/RemoteDevicesMenu.xaml.cs
@@ -0,0 +1,37 @@
+using Robust.Client.UserInterface.XAML;
+using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;
+using Robust.Client.AutoGenerated;
+using Content.Shared.Silicons.Borgs.Components;
+
+namespace Content.Client.Silicons.Laws.Ui;
+
+[GenerateTypedNameReferences]
+public sealed partial class RemoteDevicesMenu : FancyWindow
+{
+    public event Action<RemoteDeviceActionEvent>? OnRemoteDeviceAction;
+
+    public RemoteDevicesMenu()
+    {
+        RobustXamlLoader.Load(this);
+    }
+
+    public void Update(EntityUid uid, RemoteDevicesBuiState state)
+    {
+        RemoteDevicesDisplayContainer.Children.Clear();
+
+        if (state.DeviceList == null)
+            return;
+
+        foreach (var device in state.DeviceList)
+        {
+            var control = new RemoteDeviceDisplay(device.NetEntityUid, device.DisplayName);
+
+            control.OnRemoteDeviceAction += action =>
+            {
+                OnRemoteDeviceAction?.Invoke(action);
+            };
+
+            RemoteDevicesDisplayContainer.AddChild(control);
+        }
+    }
+}
diff --git a/Content.Server/Silicons/Borgs/AiRemoteControlSystem.cs b/Content.Server/Silicons/Borgs/AiRemoteControlSystem.cs
new file mode 100644
index 0000000000..0555ba4907
--- /dev/null
+++ b/Content.Server/Silicons/Borgs/AiRemoteControlSystem.cs
@@ -0,0 +1,190 @@
+using Content.Server.Radio.Components;
+using Content.Server.Silicons.Laws;
+using Content.Shared.Silicons.Borgs;
+using Content.Shared.Silicons.Borgs.Components;
+using Content.Shared.Actions;
+using Content.Shared.Mind;
+using Content.Shared.Silicons.Laws.Components;
+using Content.Shared.Silicons.StationAi;
+using Content.Shared.StationAi;
+using Content.Shared.Verbs;
+using Robust.Server.GameObjects;
+using Robust.Shared.Player;
+
+namespace Content.Server.Silicons.Borgs;
+
+public sealed class AiRemoteControlSystem : SharedAiRemoteControlSystem
+{
+    [Dependency] private readonly SharedActionsSystem _actions = default!;
+    [Dependency] private readonly SiliconLawSystem _lawSystem = default!;
+    [Dependency] private readonly SharedStationAiSystem _stationAiSystem = default!;
+    [Dependency] private readonly SharedMindSystem _mind = default!;
+    [Dependency] private readonly UserInterfaceSystem _userInterface = default!;
+    [Dependency] private readonly SharedTransformSystem _xformSystem = default!;
+
+    public override void Initialize()
+    {
+        base.Initialize();
+
+        SubscribeLocalEvent<AiRemoteControllerComponent, ReturnMindIntoAiEvent>(OnReturnMindIntoAi);
+        SubscribeLocalEvent<AiRemoteControllerComponent, MapInitEvent>(OnMapInit);
+        SubscribeLocalEvent<AiRemoteControllerComponent, ComponentShutdown>(OnShutdown);
+        SubscribeLocalEvent<AiRemoteControllerComponent, GetVerbsEvent<AlternativeVerb>>(OnGetVerbs);
+        SubscribeLocalEvent<StationAiHeldComponent, AiRemoteControllerComponent.RemoteDeviceActionMessage>(OnUiRemoteAction);
+        SubscribeLocalEvent<StationAiHeldComponent, ToggleRemoteDevicesScreenEvent>(OnToggleRemoteDevicesScreen);
+    }
+
+    private void OnMapInit(Entity<AiRemoteControllerComponent> entity, ref MapInitEvent args)
+    {
+        var visionComp = EnsureComp<StationAiVisionComponent>(entity.Owner);
+        EntityUid? actionEnt = null;
+
+        _actions.AddAction(entity.Owner, ref actionEnt, entity.Comp.BackToAiAction);
+
+        if (actionEnt != null)
+            entity.Comp.BackToAiActionEntity = actionEnt.Value;
+    }
+
+    private void OnShutdown(Entity<AiRemoteControllerComponent> entity, ref ComponentShutdown args)
+    {
+        _actions.RemoveAction(entity.Owner, entity.Comp.BackToAiActionEntity);
+
+        var backArgs = new ReturnMindIntoAiEvent();
+        backArgs.Performer = entity;
+
+        if (TryComp(entity, out IntrinsicRadioTransmitterComponent? transmitter)
+            && entity.Comp.PreviouslyTransmitterChannels != null)
+            transmitter.Channels = [.. entity.Comp.PreviouslyTransmitterChannels];
+
+        if (TryComp(entity, out ActiveRadioComponent? activeRadio)
+            && entity.Comp.PreviouslyActiveRadioChannels != null)
+            activeRadio.Channels = [.. entity.Comp.PreviouslyActiveRadioChannels];
+
+        ReturnMindIntoAi(entity);
+    }
+
+    private void OnGetVerbs(Entity<AiRemoteControllerComponent> entity, ref GetVerbsEvent<AlternativeVerb> args)
+    {
+        var user = args.User;
+
+        if (!TryComp<StationAiHeldComponent>(user, out var stationAiHeldComp))
+            return;
+
+        var verb = new AlternativeVerb
+        {
+            Text = Loc.GetString("ai-remote-control"),
+            Act = () => AiTakeControl(user, entity)
+        };
+        args.Verbs.Add(verb);
+    }
+
+    private void OnReturnMindIntoAi(Entity<AiRemoteControllerComponent> entity, ref ReturnMindIntoAiEvent args) =>
+        ReturnMindIntoAi(entity);
+
+    public void AiTakeControl(EntityUid ai, EntityUid entity)
+    {
+        if (!_mind.TryGetMind(ai, out var mindId, out var mind))
+            return;
+
+        if (!TryComp<StationAiHeldComponent>(ai, out var stationAiHeldComp))
+            return;
+
+        if (!TryComp<AiRemoteControllerComponent>(entity, out var aiRemoteComp))
+            return;
+
+        if (TryComp(entity, out IntrinsicRadioTransmitterComponent? transmitter))
+        {
+            aiRemoteComp.PreviouslyTransmitterChannels = [.. transmitter.Channels];
+
+            if (TryComp(ai, out IntrinsicRadioTransmitterComponent? stationAiTransmitter))
+                transmitter.Channels = [.. stationAiTransmitter.Channels];
+        }
+
+        if (TryComp(entity, out ActiveRadioComponent? activeRadio))
+        {
+            aiRemoteComp.PreviouslyActiveRadioChannels = [.. activeRadio.Channels];
+
+            if (TryComp(ai, out ActiveRadioComponent? stationAiActiveRadio))
+                activeRadio.Channels = [.. stationAiActiveRadio.Channels];
+        }
+
+        _mind.ControlMob(ai, entity);
+        aiRemoteComp.AiHolder = ai;
+        aiRemoteComp.LinkedMind = mindId;
+
+        stationAiHeldComp.CurrentConnectedEntity = entity;
+
+        if (!_stationAiSystem.TryGetCore(ai, out var stationAiCore))
+            return;
+
+        _stationAiSystem.SwitchRemoteEntityMode(stationAiCore, false);
+
+        RewriteLaws(ai, entity);
+    }
+
+    private void OnToggleRemoteDevicesScreen(EntityUid uid, StationAiHeldComponent component, ToggleRemoteDevicesScreenEvent args)
+    {
+        if (args.Handled || !TryComp<ActorComponent>(uid, out var actor))
+            return;
+        args.Handled = true;
+
+        _userInterface.TryToggleUi(uid, RemoteDeviceUiKey.Key, actor.PlayerSession);
+
+        var query = EntityManager.EntityQueryEnumerator<AiRemoteControllerComponent>();
+        var remoteDevices = new List<RemoteDevicesData>();
+
+        while (query.MoveNext(out var queryUid, out var comp))
+        {
+            var data = new RemoteDevicesData
+            {
+                NetEntityUid = GetNetEntity(queryUid),
+                DisplayName = Comp<MetaDataComponent>(queryUid).EntityName
+            };
+
+            remoteDevices.Add(data);
+        }
+
+        var state = new RemoteDevicesBuiState(remoteDevices);
+        _userInterface.SetUiState(uid, RemoteDeviceUiKey.Key, state);
+    }
+
+    private void OnUiRemoteAction(EntityUid uid, StationAiHeldComponent component, AiRemoteControllerComponent.RemoteDeviceActionMessage msg)
+    {
+        if (msg.RemoteAction == null)
+            return;
+
+        var target = GetEntity(msg.RemoteAction?.Target);
+
+        if (!HasComp<AiRemoteControllerComponent>(target))
+            return;
+
+        switch (msg.RemoteAction?.ActionType)
+        {
+            case RemoteDeviceActionEvent.RemoteDeviceActionType.MoveToDevice:
+                if (!_stationAiSystem.TryGetCore(uid, out var stationAiCore)
+                    || stationAiCore.Comp?.RemoteEntity == null)
+                    return;
+                _xformSystem.SetCoordinates(stationAiCore.Comp.RemoteEntity.Value, Transform(target.Value).Coordinates);
+                break;
+
+            case RemoteDeviceActionEvent.RemoteDeviceActionType.TakeControl:
+                AiTakeControl(uid, target.Value);
+                break;
+        }
+    }
+
+    private void RewriteLaws(EntityUid from, EntityUid to)
+    {
+        if (!TryComp<SiliconLawProviderComponent>(from, out var fromLawsComp))
+            return;
+
+        if (!TryComp<SiliconLawProviderComponent>(to, out var toLawsComp))
+            return;
+
+        if (fromLawsComp.Lawset == null)
+            return;
+
+        var fromLaws = _lawSystem.GetLaws(from);
+        _lawSystem.SetLawsSilent(fromLaws.Laws, to);
+    }
+}
diff --git a/Content.Server/Silicons/Borgs/BorgSwitchableTypeSystem.cs b/Content.Server/Silicons/Borgs/BorgSwitchableTypeSystem.cs
index d1a32a6a5b..a83f36a2e1 100644
--- a/Content.Server/Silicons/Borgs/BorgSwitchableTypeSystem.cs
+++ b/Content.Server/Silicons/Borgs/BorgSwitchableTypeSystem.cs
@@ -28,6 +28,21 @@ protected override void SelectBorgModule(Entity<BorgSwitchableTypeComponent> ent
         if (TryComp(ent, out ActiveRadioComponent? activeRadio))
             activeRadio.Channels = [.. radioChannels];
 
+        if (TryComp(ent, out AiRemoteControllerComponent? aiRemoteComp))
+        {
+            if (TryComp(aiRemoteComp.AiHolder, out IntrinsicRadioTransmitterComponent? stationAiTransmitter) && transmitter != null)
+            {
+                aiRemoteComp.PreviouslyTransmitterChannels = [.. radioChannels];
+                transmitter.Channels = [.. stationAiTransmitter.Channels];
+            }
+
+            if (TryComp(aiRemoteComp.AiHolder, out ActiveRadioComponent? stationAiActiveRadio) && activeRadio != null)
+            {
+                aiRemoteComp.PreviouslyActiveRadioChannels = [.. radioChannels];
+                activeRadio.Channels = [.. stationAiActiveRadio.Channels];
+            }
+        }
+
         // Borg transponder for the robotics console
         if (TryComp(ent, out BorgTransponderComponent? transponder))
         {
diff --git a/Content.Server/Silicons/Borgs/BorgSystem.Transponder.cs b/Content.Server/Silicons/Borgs/BorgSystem.Transponder.cs
index e950d3f288..b51c0cf6d9 100644
--- a/Content.Server/Silicons/Borgs/BorgSystem.Transponder.cs
+++ b/Content.Server/Silicons/Borgs/BorgSystem.Transponder.cs
@@ -47,7 +47,8 @@ public override void Update(float frameTime)
                 charge,
                 chassis.ModuleCount,
                 hasBrain,
-                canDisable);
+                canDisable,
+                HasComp<AiRemoteControllerComponent>(uid));
 
             var payload = new NetworkPayload()
             {
diff --git a/Content.Server/Silicons/Borgs/BorgSystem.cs b/Content.Server/Silicons/Borgs/BorgSystem.cs
index 0cd407000f..7fcbfa678d 100644
--- a/Content.Server/Silicons/Borgs/BorgSystem.cs
+++ b/Content.Server/Silicons/Borgs/BorgSystem.cs
@@ -24,6 +24,8 @@
 using Content.Shared.Roles;
 using Content.Shared.Silicons.Borgs;
 using Content.Shared.Silicons.Borgs.Components;
+using Content.Shared.Silicons.StationAi;
+using Content.Shared.StationAi;
 using Content.Shared.Throwing;
 using Content.Shared.Whitelist;
 using Content.Shared.Wires;
@@ -104,6 +106,7 @@ private void OnChassisInteractUsing(EntityUid uid, BorgChassisComponent componen
         var used = args.Used;
         TryComp<BorgBrainComponent>(used, out var brain);
         TryComp<BorgModuleComponent>(used, out var module);
+        TryComp<AiRemoteBrainComponent>(used, out var aiBrain);
 
         if (TryComp<WiresPanelComponent>(uid, out var panel) && !panel.Open)
         {
@@ -142,6 +145,19 @@ private void OnChassisInteractUsing(EntityUid uid, BorgChassisComponent componen
             args.Handled = true;
             UpdateUI(uid, component);
         }
+
+        if (component.BrainEntity == null && aiBrain != null &&
+            _whitelistSystem.IsWhitelistPassOrNull(component.BrainWhitelist, used))
+        {
+            EnsureComp<AiRemoteControllerComponent>(uid);
+            _container.Insert(used, component.BrainContainer);
+            _adminLog.Add(LogType.Action, LogImpact.Medium,
+                $"{ToPrettyString(args.User):player} installed ai remote brain {ToPrettyString(used)} into borg {ToPrettyString(uid)}");
+            args.Handled = true;
+            BorgActivate(uid, component);
+
+            UpdateUI(uid, component);
+        }
     }
 
     /// <summary>
@@ -176,6 +192,13 @@ protected override void OnRemoved(EntityUid uid, BorgChassisComponent component,
         {
             _mind.TransferTo(mindId, args.Entity, mind: mind);
         }
+
+        if (HasComp<AiRemoteBrainComponent>(args.Entity))
+        {
+            BorgDeactivate(uid, component);
+            RemComp<AiRemoteControllerComponent>(uid);
+            RemComp<StationAiVisionComponent>(uid);
+        }
     }
 
     private void OnMindAdded(EntityUid uid, BorgChassisComponent component, MindAddedMessage args)
diff --git a/Content.Server/Silicons/Laws/SiliconLawSystem.cs b/Content.Server/Silicons/Laws/SiliconLawSystem.cs
index 444732b2b3..936759a2a8 100644
--- a/Content.Server/Silicons/Laws/SiliconLawSystem.cs
+++ b/Content.Server/Silicons/Laws/SiliconLawSystem.cs
@@ -11,8 +11,11 @@
 using Content.Shared.Mind;
 using Content.Shared.Mind.Components;
 using Content.Shared.Roles;
+using Content.Shared.Silicons.Borgs.Components;
 using Content.Shared.Silicons.Laws;
 using Content.Shared.Silicons.Laws.Components;
+using Content.Shared.Silicons.StationAi;
+using Content.Shared.Tag;
 using Content.Shared.Wires;
 using Robust.Server.GameObjects;
 using Robust.Shared.Audio;
@@ -33,6 +36,7 @@ public sealed class SiliconLawSystem : SharedSiliconLawSystem
     [Dependency] private readonly StationSystem _station = default!;
     [Dependency] private readonly UserInterfaceSystem _userInterface = default!;
     [Dependency] private readonly EmagSystem _emag = default!;
+    [Dependency] private readonly TagSystem _tagSystem = default!;
 
     /// <inheritdoc/>
     public override void Initialize()
@@ -62,6 +66,10 @@ private void OnMindAdded(EntityUid uid, SiliconLawBoundComponent component, Mind
         if (!TryComp<ActorComponent>(uid, out var actor))
             return;
 
+        if (HasComp<AiRemoteControllerComponent>(uid)
+            || _tagSystem.HasTag(uid, "StationAi")) // skip a law's notification for remotable and AI
+            return;
+
         var msg = Loc.GetString("laws-notify");
         var wrappedMessage = Loc.GetString("chat-manager-server-wrap-message", ("message", msg));
         _chatManager.ChatMessageToOne(ChatChannel.Server, msg, wrappedMessage, default, false, actor.PlayerSession.Channel, colorOverride: Color.FromHex("#5ed7aa"));
@@ -154,6 +162,9 @@ private void OnEmagLawsAdded(EntityUid uid, SiliconLawProviderComponent componen
         if (component.Lawset == null)
             component.Lawset = GetLawset(component.Laws);
 
+        if (HasComp<AiRemoteControllerComponent>(uid)) // You can't emag controllable entities
+            return;
+
         // Show the silicon has been subverted.
         component.Subverted = true;
 
@@ -304,8 +315,26 @@ protected override void OnUpdaterInsert(Entity<SiliconLawUpdaterComponent> ent,
         while (query.MoveNext(out var update))
         {
             SetLaws(lawset, update, provider.LawUploadSound);
+
+            if (TryComp<StationAiHeldComponent>(update, out var stationAiHeldComp)
+                && stationAiHeldComp.CurrentConnectedEntity != null
+                && HasComp<SiliconLawProviderComponent>(stationAiHeldComp.CurrentConnectedEntity))
+            {
+                SetLaws(lawset, stationAiHeldComp.CurrentConnectedEntity.Value, provider.LawUploadSound);
+            }
         }
     }
+
+    public void SetLawsSilent(List<SiliconLaw> newLaws, EntityUid target, SoundSpecifier? cue = null)
+    {
+        if (!TryComp<SiliconLawProviderComponent>(target, out var component))
+            return;
+
+        if (component.Lawset == null)
+            component.Lawset = new SiliconLawset();
+
+        component.Lawset.Laws = newLaws;
+    }
 }
 
 [ToolshedCommand, AdminCommand(AdminFlags.Admin)]
diff --git a/Content.Shared/Robotics/RoboticsConsoleUi.cs b/Content.Shared/Robotics/RoboticsConsoleUi.cs
index 7a6974fb51..d859b019f7 100644
--- a/Content.Shared/Robotics/RoboticsConsoleUi.cs
+++ b/Content.Shared/Robotics/RoboticsConsoleUi.cs
@@ -111,7 +111,10 @@ public partial record struct CyborgControlData
     [DataField(customTypeSerializer: typeof(TimeOffsetSerializer))]
     public TimeSpan Timeout = TimeSpan.Zero;
 
-    public CyborgControlData(SpriteSpecifier? chassisSprite, string chassisName, string name, float charge, int moduleCount, bool hasBrain, bool canDisable)
+    [DataField]
+    public bool IsAiControllable;
+
+    public CyborgControlData(SpriteSpecifier? chassisSprite, string chassisName, string name, float charge, int moduleCount, bool hasBrain, bool canDisable, bool isAiControllable)
     {
         ChassisSprite = chassisSprite;
         ChassisName = chassisName;
@@ -120,6 +123,7 @@ public CyborgControlData(SpriteSpecifier? chassisSprite, string chassisName, str
         ModuleCount = moduleCount;
         HasBrain = hasBrain;
         CanDisable = canDisable;
+        IsAiControllable = isAiControllable;
     }
 }
 
diff --git a/Content.Shared/Silicons/Borgs/Components/AiRemoteBrainComponent.cs b/Content.Shared/Silicons/Borgs/Components/AiRemoteBrainComponent.cs
new file mode 100644
index 0000000000..5dc739fc22
--- /dev/null
+++ b/Content.Shared/Silicons/Borgs/Components/AiRemoteBrainComponent.cs
@@ -0,0 +1,6 @@
+namespace Content.Shared.Silicons.Borgs.Components;
+
+[RegisterComponent]
+public sealed partial class AiRemoteBrainComponent : Component
+{
+}
\ No newline at end of file
diff --git a/Content.Shared/Silicons/Borgs/Components/SharedAiREmoteControllerComponent.cs b/Content.Shared/Silicons/Borgs/Components/SharedAiREmoteControllerComponent.cs
new file mode 100644
index 0000000000..09f137f7d2
--- /dev/null
+++ b/Content.Shared/Silicons/Borgs/Components/SharedAiREmoteControllerComponent.cs
@@ -0,0 +1,63 @@
+using Robust.Shared.Prototypes;
+using Robust.Shared.Serialization;
+
+namespace Content.Shared.Silicons.Borgs.Components;
+
+[RegisterComponent]
+public sealed partial class AiRemoteControllerComponent : Component
+{
+    [DataField] public EntityUid? AiHolder;
+    [DataField] public EntityUid? LinkedMind;
+
+    [DataField] public string[]? PreviouslyTransmitterChannels;
+    [DataField] public string[]? PreviouslyActiveRadioChannels;
+
+    [DataField] public EntProtoId BackToAiAction = "ActionBackToAi";
+    [DataField] public EntityUid? BackToAiActionEntity;
+
+    [Serializable, NetSerializable]
+    public sealed class RemoteDeviceActionMessage : BoundUserInterfaceMessage
+    {
+        public readonly RemoteDeviceActionEvent? RemoteAction;
+        public RemoteDeviceActionMessage(RemoteDeviceActionEvent remoteDeviceAction)
+        {
+            RemoteAction = remoteDeviceAction;
+        }
+    }
+}
+
+[Serializable, NetSerializable]
+public sealed class RemoteDeviceActionEvent : EntityEventArgs
+{
+    public enum RemoteDeviceActionType
+    {
+        MoveToDevice,
+        TakeControl
+    }
+    public RemoteDeviceActionType ActionType;
+    public NetEntity Target;
+
+    public RemoteDeviceActionEvent(RemoteDeviceActionType actionType, NetEntity target)
+    {
+        ActionType = actionType;
+        Target = target;
+    }
+}
+
+[Serializable, NetSerializable]
+public record struct RemoteDevicesData()
+{
+    public string DisplayName = string.Empty;
+    public NetEntity NetEntityUid = NetEntity.Invalid;
+}
+
+[Serializable, NetSerializable]
+public sealed class RemoteDevicesBuiState : BoundUserInterfaceState
+{
+    public List<RemoteDevicesData> DeviceList;
+
+    public RemoteDevicesBuiState(List<RemoteDevicesData> deviceList)
+    {
+        DeviceList = deviceList;
+    }
+}
\ No newline at end of file
diff --git a/Content.Shared/Silicons/Borgs/SharedAiRemoteControlSystem.cs b/Content.Shared/Silicons/Borgs/SharedAiRemoteControlSystem.cs
new file mode 100644
index 0000000000..890112d705
--- /dev/null
+++ b/Content.Shared/Silicons/Borgs/SharedAiRemoteControlSystem.cs
@@ -0,0 +1,60 @@
+using Content.Shared.Silicons.Borgs.Components;
+using Content.Shared.Actions;
+using Content.Shared.Mind;
+using Content.Shared.Silicons.StationAi;
+using Robust.Shared.Serialization;
+
+namespace Content.Shared.Silicons.Borgs;
+
+public abstract class SharedAiRemoteControlSystem : EntitySystem
+{
+    [Dependency] private readonly SharedStationAiSystem _stationAiSystem = default!;
+    [Dependency] private readonly SharedTransformSystem _xformSystem = default!;
+    [Dependency] private readonly SharedMindSystem _mind = default!;
+
+    public override void Initialize()
+    {
+        base.Initialize();
+    }
+
+    public void ReturnMindIntoAi(EntityUid entity)
+    {
+        if (!TryComp<AiRemoteControllerComponent>(entity, out var remoteComp))
+            return;
+
+        if (remoteComp?.AiHolder == null
+            || !_stationAiSystem.TryGetCore(remoteComp.AiHolder.Value, out var stationAiCore)
+            || stationAiCore.Comp?.RemoteEntity == null)
+            return;
+
+        if (remoteComp.LinkedMind == null)
+            return;
+
+        if (!TryComp<StationAiHeldComponent>(remoteComp.AiHolder.Value, out var stationAiHeldComp))
+            return;
+
+        stationAiHeldComp.CurrentConnectedEntity = null;
+
+        _mind.TransferTo(remoteComp.LinkedMind.Value, remoteComp.AiHolder);
+
+        _stationAiSystem.SwitchRemoteEntityMode(stationAiCore, true);
+        remoteComp.AiHolder = null;
+        remoteComp.LinkedMind = null;
+
+        _xformSystem.SetCoordinates(stationAiCore.Comp.RemoteEntity.Value, Transform(entity).Coordinates);
+    }
+}
+
+public sealed partial class ReturnMindIntoAiEvent : InstantActionEvent
+{
+}
+
+public sealed partial class ToggleRemoteDevicesScreenEvent : InstantActionEvent
+{
+}
+
+[Serializable, NetSerializable]
+public enum RemoteDeviceUiKey : byte
+{
+    Key
+}
diff --git a/Content.Shared/Silicons/Laws/SharedSiliconLawSystem.cs b/Content.Shared/Silicons/Laws/SharedSiliconLawSystem.cs
index e7433de604..1b538efc2e 100644
--- a/Content.Shared/Silicons/Laws/SharedSiliconLawSystem.cs
+++ b/Content.Shared/Silicons/Laws/SharedSiliconLawSystem.cs
@@ -1,6 +1,7 @@
 ﻿using Content.Shared.Emag.Systems;
 using Content.Shared.Mind;
 using Content.Shared.Popups;
+using Content.Shared.Silicons.Borgs.Components;
 using Content.Shared.Silicons.Laws.Components;
 using Content.Shared.Stunnable;
 using Content.Shared.Wires;
@@ -33,6 +34,9 @@ private void OnGotEmagged(EntityUid uid, EmagSiliconLawComponent component, ref
         if (_emag.CheckFlag(uid, EmagType.Interaction))
             return;
 
+        if (HasComp<AiRemoteControllerComponent>(uid))
+            return;
+
         // prevent self-emagging
         if (uid == args.UserUid)
         {
diff --git a/Content.Shared/Silicons/StationAi/SharedStationAiSystem.cs b/Content.Shared/Silicons/StationAi/SharedStationAiSystem.cs
index 328dc58d85..ccf0e6181b 100644
--- a/Content.Shared/Silicons/StationAi/SharedStationAiSystem.cs
+++ b/Content.Shared/Silicons/StationAi/SharedStationAiSystem.cs
@@ -15,6 +15,7 @@
 using Content.Shared.Popups;
 using Content.Shared.Power;
 using Content.Shared.Power.EntitySystems;
+using Content.Shared.Silicons.Borgs;
 using Content.Shared.StationAi;
 using Content.Shared.Verbs;
 using Robust.Shared.Audio;
@@ -58,6 +59,7 @@ public abstract partial class SharedStationAiSystem : EntitySystem
     [Dependency] private readonly   SharedUserInterfaceSystem _uiSystem = default!;
     [Dependency] private readonly   StationAiVisionSystem _vision = default!;
     [Dependency] private readonly   IPrototypeManager _protoManager = default!;
+    [Dependency] private readonly SharedAiRemoteControlSystem _remoteSystem = default!;
 
     // StationAiHeld is added to anything inside of an AI core.
     // StationAiHolder indicates it can hold an AI positronic brain (e.g. holocard / core).
@@ -235,6 +237,11 @@ private void OnIntellicardDoAfter(Entity<StationAiHolderComponent> ent, ref Inte
         // Try to insert our thing into them
         if (_slots.CanEject(ent.Owner, args.User, ent.Comp.Slot))
         {
+            if (ent.Comp.Slot.Item != null
+                && TryComp<StationAiHeldComponent>(ent.Comp.Slot.Item, out var stationAiHeldComp))
+                if (stationAiHeldComp.CurrentConnectedEntity != null)
+                    _remoteSystem.ReturnMindIntoAi(stationAiHeldComp.CurrentConnectedEntity.Value);
+
             if (!_slots.TryInsert(args.Args.Target.Value, targetHolder.Slot, ent.Comp.Slot.Item!.Value, args.User, excludeUserAudio: true))
             {
                 return;
@@ -293,6 +300,10 @@ private void OnHolderInteract(Entity<StationAiHolderComponent> ent, ref AfterInt
             AnnounceIntellicardUsage(held, intelliComp.WarningSound);
         }
 
+        if (TryComp<StationAiHeldComponent>(held, out var heldComp))
+            if (heldComp.CurrentConnectedEntity != null)
+                AnnounceIntellicardUsage(heldComp.CurrentConnectedEntity.Value, intelliComp.WarningSound);
+
         var doAfterArgs = new DoAfterArgs(EntityManager, args.User, cardHasAi ? intelliComp.UploadTime : intelliComp.DownloadTime, new IntellicardDoAfterEvent(), args.Target, ent.Owner)
         {
             BreakOnDamage = true,
diff --git a/Content.Shared/Silicons/StationAi/StationAiHeldComponent.cs b/Content.Shared/Silicons/StationAi/StationAiHeldComponent.cs
index 6dab1ee491..bec83d3cc2 100644
--- a/Content.Shared/Silicons/StationAi/StationAiHeldComponent.cs
+++ b/Content.Shared/Silicons/StationAi/StationAiHeldComponent.cs
@@ -6,4 +6,8 @@ namespace Content.Shared.Silicons.StationAi;
 /// Indicates this entity is currently held inside of a station AI core.
 /// </summary>
 [RegisterComponent, NetworkedComponent]
-public sealed partial class StationAiHeldComponent : Component;
+public sealed partial class StationAiHeldComponent : Component
+{
+    [DataField]
+    public EntityUid? CurrentConnectedEntity;
+}
diff --git a/Resources/Locale/en-US/silicons/ai-remote.ftl b/Resources/Locale/en-US/silicons/ai-remote.ftl
new file mode 100644
index 0000000000..f8400ec64e
--- /dev/null
+++ b/Resources/Locale/en-US/silicons/ai-remote.ftl
@@ -0,0 +1,4 @@
+# UI
+ai-remote-ui-menu-title = Available devices
+ai-remote-ui-menu-moveto = Move to
+ai-remote-control = Take control
\ No newline at end of file
diff --git a/Resources/Prototypes/Actions/station_ai.yml b/Resources/Prototypes/Actions/station_ai.yml
index 4dbaf07aab..e6fdbb4993 100644
--- a/Resources/Prototypes/Actions/station_ai.yml
+++ b/Resources/Prototypes/Actions/station_ai.yml
@@ -57,3 +57,33 @@
     useDelay: 0.5
   - type: InstantAction
     event: !type:ToggleLawsScreenEvent
+
+- type: entity
+  parent: BaseMentalAction
+  id: ActionBackToAi
+  name: Back to Ai
+  description: Sends your mind back to the core.
+  components:
+  - type: Action
+    priority: -9
+    itemIconStyle: BigAction
+    icon:
+      sprite: Interface/Actions/actions_ai.rsi
+      state: ai_core
+  - type: InstantAction
+    event: !type:ReturnMindIntoAiEvent
+
+- type: entity
+  parent: BaseMentalAction
+  id: ActionOpenRemoteDevicesMenu
+  name: Open list of remote devices
+  description: Opens a menu with available remote devices.
+  components:
+  - type: Action
+    priority: -9
+    itemIconStyle: BigAction
+    icon:
+      sprite: Interface/Actions/actions_ai.rsi
+      state: borg_control
+  - type: InstantAction
+    event: !type:ToggleRemoteDevicesScreenEvent
diff --git a/Resources/Prototypes/Entities/Mobs/Player/silicon.yml b/Resources/Prototypes/Entities/Mobs/Player/silicon.yml
index 303f7dc676..47947a68e3 100644
--- a/Resources/Prototypes/Entities/Mobs/Player/silicon.yml
+++ b/Resources/Prototypes/Entities/Mobs/Player/silicon.yml
@@ -36,6 +36,7 @@
     - ActionJumpToCore
     - ActionSurvCameraLights
     - ActionAIViewLaws
+    - ActionOpenRemoteDevicesMenu
   - type: UserInterface
     interfaces:
       enum.RadarConsoleUiKey.Key:
@@ -48,6 +49,8 @@
         type: SiliconLawBoundUserInterface
       enum.CommunicationsConsoleUiKey.Key:
         type: CommunicationsConsoleBoundUserInterface
+      enum.RemoteDeviceUiKey.Key:
+        type: RemoteDevicesBoundUserInterface
   - type: IntrinsicUI
     uis:
       enum.RadarConsoleUiKey.Key:
diff --git a/Resources/Prototypes/Entities/Objects/Specific/Robotics/ai_remote.yml b/Resources/Prototypes/Entities/Objects/Specific/Robotics/ai_remote.yml
new file mode 100644
index 0000000000..508ac3bdd2
--- /dev/null
+++ b/Resources/Prototypes/Entities/Objects/Specific/Robotics/ai_remote.yml
@@ -0,0 +1,15 @@
+- type: entity
+  parent: BaseItem
+  id: AiRemoteBrain
+  name: "B.O.R.I.S. AI-Cyborg Remote Control"
+  description: Artificial Intelligence cyborg control board.
+  components:
+    - type: Sprite
+      sprite: Objects/Misc/module.rsi
+      state: boris
+    - type: Examiner
+    - type: AiRemoteBrain
+    - type: Actions
+    - type: Tag
+      tags:
+      - CannotSuicide
diff --git a/Resources/Prototypes/Recipes/Lathes/Packs/robotics.yml b/Resources/Prototypes/Recipes/Lathes/Packs/robotics.yml
index 74483c4ebe..8843f6d3f4 100644
--- a/Resources/Prototypes/Recipes/Lathes/Packs/robotics.yml
+++ b/Resources/Prototypes/Recipes/Lathes/Packs/robotics.yml
@@ -31,6 +31,7 @@
   id: Robotics
   recipes:
   - ProximitySensor
+  - AiRemoteBrain
 
 - type: latheRecipePack
   id: BorgModules
diff --git a/Resources/Prototypes/Recipes/Lathes/robot_parts.yml b/Resources/Prototypes/Recipes/Lathes/robot_parts.yml
index 37f602b2e8..b472854e6e 100644
--- a/Resources/Prototypes/Recipes/Lathes/robot_parts.yml
+++ b/Resources/Prototypes/Recipes/Lathes/robot_parts.yml
@@ -105,3 +105,14 @@
     Gold: 100
     Silver: 100
     Plasma: 1000
+
+- type: latheRecipe
+  parent: BaseRoboticsRecipe
+  id: AiRemoteBrain
+  result: AiRemoteBrain
+  completetime: 4
+  materials:
+    Steel: 300
+    Glass: 400
+    Gold: 400
+    Silver: 200
\ No newline at end of file
diff --git a/Resources/Prototypes/Research/experimental.yml b/Resources/Prototypes/Research/experimental.yml
index b5646de7e7..53ebdad379 100644
--- a/Resources/Prototypes/Research/experimental.yml
+++ b/Resources/Prototypes/Research/experimental.yml
@@ -11,6 +11,7 @@
   cost: 5000
   recipeUnlocks:
   - ProximitySensor
+  - AiRemoteBrain
 
 - type: technology
   id: BasicAnomalousResearch
diff --git a/Resources/Textures/Interface/Actions/actions_ai.rsi/borg_control.png b/Resources/Textures/Interface/Actions/actions_ai.rsi/borg_control.png
new file mode 100644
index 0000000000000000000000000000000000000000..81fab50f1c859cb0f77eca0ec7deff3805b88d94
GIT binary patch
literal 372
zcmeAS@N?(olHy`uVBq!ia0vp^3LwnE3?yBabR7dyjKx9jP7LeL$-D$|SkfJR9T^xl
z_H+M9WCilI0(?STjg5_gOa?wl1}R+zg9L^Z0u1+r8G@EFc=R(g{AX}&6^vb~T(BLe
z#6jZH6p+f2Aiv=M$biB1z?~C78O{Qa$YP*^!ywFfJby(BP;jTGi(`m||I*1fg_;$3
zTo1Y(Qu_aY_udnHOK-fCH08e|!@T%VeuapDcaj6gP6d@is{O1+>~Y*)3Z_0hY*Lau
zC4B+;3xYLUt*6<2xFcX~ykFXl?eIji@Sl%WEUzwY49?~KZf!i7@${Lf$6u6zv|<Ct
ztqXRNC+^&Kax}k{-n{jigv|>My?-ejjY%g=oQ;H!3Z7zE!1BScboU7pHu1EQuPREV
uY-{h9T3Q5UE3uc^pZj+G_c^r(f2E_&ipGali{Alyg2B_(&t;ucLK6VdI)y6$

literal 0
HcmV?d00001

diff --git a/Resources/Textures/Interface/Actions/actions_ai.rsi/meta.json b/Resources/Textures/Interface/Actions/actions_ai.rsi/meta.json
index 434b9052e0..73ba9496c8 100644
--- a/Resources/Textures/Interface/Actions/actions_ai.rsi/meta.json
+++ b/Resources/Textures/Interface/Actions/actions_ai.rsi/meta.json
@@ -1,7 +1,7 @@
 {
 	"version": 1,
 	"license": "CC-BY-SA-3.0",
-	"copyright": "Taken from tgstation at commit https://github.com/tgstation/tgstation/blob/c473a8bcc28fbd80827dfca5660d81ca6e833e2c/icons/hud/screen_ai.dmi , some sprites updated by ScarKy0(Discord), door actions by ScarKy0(Discord) and @Max_tanuki(Twitter)",
+	"copyright": "Taken from tgstation at commit https://github.com/tgstation/tgstation/blob/c473a8bcc28fbd80827dfca5660d81ca6e833e2c/icons/hud/screen_ai.dmi , some sprites updated by ScarKy0(Discord), door actions by ScarKy0(Discord) and @Max_tanuki(Twitter), borg_control modified from malf modules by @AgentePanela(Twitter)",
 	"size": {
 		"x": 32,
 		"y": 32
@@ -48,6 +48,9 @@
 		},
 		{
 			"name": "door_overcharge_off"
+		},
+		{
+			"name": "borg_control"
 		}
 	]
 }
